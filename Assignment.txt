#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

const int MAX_NODES = 1e5 + 5;
vector<int> graph[MAX_NODES];
vector<pair<int, int>> criticalConnections;
int visited[MAX_NODES], lowLink[MAX_NODES], discoveryTime[MAX_NODES], parent[MAX_NODES], timeCounter;

void dfs(int node) {
    visited[node] = true;
    discoveryTime[node] = lowLink[node] = ++timeCounter;

    for (int neighbor : graph[node]) {
        if (!visited[neighbor]) {
            parent[neighbor] = node;
            dfs(neighbor);
            lowLink[node] = min(lowLink[node], lowLink[neighbor]);

            if (discoveryTime[node] < lowLink[neighbor])
                criticalConnections.push_back(make_pair(node, neighbor));
        } else if (neighbor != parent[node]) {
            lowLink[node] = min(lowLink[node], discoveryTime[neighbor]);
        }
    }
}

vector<pair<int, int> > findCriticalConnections(int n, vector<pair<int, int> > connections) {
    memset(visited, false, sizeof visited);
    memset(parent, -1, sizeof parent);
    timeCounter = 0;
    criticalConnections.clear();

   
    for (pair<int, int> connection : connections) {
        int u = connection.first;
        int v = connection.second;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

   
    for (int node = 0; node < n; node++) {
        if (!visited[node])
            dfs(node);
    }

    return criticalConnections;
}

int main() {
    int n = 4;
    vector<pair<int, int> > connections = {{0,1}, {1,2}, {2,0}, {1,3}};
    vector<pair<int, int> > criticalConnections = findCriticalConnections(n, connections);

    for (pair<int, int> connection : criticalConnections) {
        cout << "(" << connection.first << "," << connection.second << ")" << endl;
    }

    return 0;
}